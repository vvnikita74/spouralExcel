import pymorphy2
from num2words import num2words

from backend.apps.excel_app.utils.morph_patch import apply_patch

apply_patch()
morph = pymorphy2.MorphAnalyzer()


def number_to_floor_word(number):
    number_word = num2words(number, lang='ru')
    words = number_word.split()
    inflected_words = []

    for word in words:
        parsed_word = morph.parse(word)[0]
        inflected_word = parsed_word.inflect(
            {'gent'})  # Use genitive case for correct inflection
        if inflected_word is None:
            raise ValueError(f"Unable to inflect the word: {word}")
        inflected_words.append(inflected_word.word)

    inflected_number_word = ''.join(
        inflected_words)  # Join words without spaces

    # Handle special cases

    if 90 <= number <= 99:
        if number == 91:
            inflected_number_word = 'девяносто' + inflected_number_word[9:-2]
        else:
            inflected_number_word = 'девяносто' + inflected_number_word[9:]
    elif number % 10 == 1 and number != 11 or number == 1:
        inflected_number_word = inflected_number_word[:-2]

    return f"{inflected_number_word}этажный"


import unittest
from backend.apps.excel_app.utils.floors import number_to_floor_word


class TestNumberToFloorWord(unittest.TestCase):
    def test_number_to_floor_word(self):
        test_cases = {
            1: "одноэтажный",
            2: "двухэтажный",
            3: "трёхэтажный",
            4: "четырёхэтажный",
            5: "пятиэтажный",
            6: "шестиэтажный",
            7: "семиэтажный",
            8: "восьмиэтажный",
            9: "девятиэтажный",
            10: "десятиэтажный",
            11: "одиннадцатиэтажный",
            12: "двенадцатиэтажный",
            13: "тринадцатиэтажный",
            14: "четырнадцатиэтажный",
            15: "пятнадцатиэтажный",
            16: "шестнадцатиэтажный",
            17: "семнадцатиэтажный",
            18: "восемнадцатиэтажный",
            19: "девятнадцатиэтажный",
            20: "двадцатиэтажный",
            21: "двадцатиодноэтажный",
            22: "двадцатидвухэтажный",
            23: "двадцатитрёхэтажный",
            24: "двадцатичетырёхэтажный",
            25: "двадцатипятиэтажный",
            26: "двадцатишестиэтажный",
            27: "двадцатисемиэтажный",
            28: "двадцативосьмиэтажный",
            29: "двадцатидевятиэтажный",
            30: "тридцатиэтажный",
            31: "тридцатиодноэтажный",
            32: "тридцатидвухэтажный",
            33: "тридцатитрёхэтажный",
            34: "тридцатичетырёхэтажный",
            35: "тридцатипятиэтажный",
            36: "тридцатишестиэтажный",
            37: "тридцатисемиэтажный",
            38: "тридцативосьмиэтажный",
            39: "тридцатидевятиэтажный",
            40: "сорокаэтажный",
            41: "сорокаодноэтажный",
            42: "сорокадвухэтажный",
            43: "сорокатрёхэтажный",
            44: "сорокачетырёхэтажный",
            45: "сорокапятиэтажный",
            46: "сорокашестиэтажный",
            47: "сорокасемиэтажный",
            48: "сорокавосьмиэтажный",
            49: "сорокадевятиэтажный",
            50: "пятидесятиэтажный",
            51: "пятидесятиодноэтажный",
            52: "пятидесятидвухэтажный",
            53: "пятидесятитрёхэтажный",
            54: "пятидесятичетырёхэтажный",
            55: "пятидесятипятиэтажный",
            56: "пятидесятишестиэтажный",
            57: "пятидесятисемиэтажный",
            58: "пятидесятивосьмиэтажный",
            59: "пятидесятидевятиэтажный",
            60: "шестидесятиэтажный",
            61: "шестидесятиодноэтажный",
            62: "шестидесятидвухэтажный",
            63: "шестидесятитрёхэтажный",
            64: "шестидесятичетырёхэтажный",
            65: "шестидесятипятиэтажный",
            66: "шестидесятишестиэтажный",
            67: "шестидесятисемиэтажный",
            68: "шестидесятивосьмиэтажный",
            69: "шестидесятидевятиэтажный",
            70: "семидесятиэтажный",
            71: "семидесятиодноэтажный",
            72: "семидесятидвухэтажный",
            73: "семидесятитрёхэтажный",
            74: "семидесятичетырёхэтажный",
            75: "семидесятипятиэтажный",
            76: "семидесятишестиэтажный",
            77: "семидесятисемиэтажный",
            78: "семидесятивосьмиэтажный",
            79: "семидесятидевятиэтажный",
            80: "восьмидесятиэтажный",
            81: "восьмидесятиодноэтажный",
            82: "восьмидесятидвухэтажный",
            83: "восьмидесятитрёхэтажный",
            84: "восьмидесятичетырёхэтажный",
            85: "восьмидесятипятиэтажный",
            86: "восьмидесятишестиэтажный",
            87: "восьмидесятисемиэтажный",
            88: "восьмидесятивосьмиэтажный",
            89: "восьмидесятидевятиэтажный",
            90: "девяностоэтажный",
            91: "девяностоодноэтажный",
            92: "девяностодвухэтажный",
            93: "девяностотрёхэтажный",
            94: "девяносточетырёхэтажный",
            95: "девяностопятиэтажный",
            96: "девяностошестиэтажный",
            97: "девяностосемиэтажный",
            98: "девяностовосьмиэтажный",
            99: "девяностодевятиэтажный",
        }

        for number, expected in test_cases.items():
            with self.subTest(number=number):
                self.assertEqual(number_to_floor_word(number), expected)


if __name__ == '__main__':
    unittest.main()
